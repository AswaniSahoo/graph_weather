[project]
name = "graph_weather"
requires-python = ">=3.11"
version = "1.0.89"
description = "Graph-based AI Weather models"
authors = [
    {name = "Jacob Prince-Bieker", email = "jacob@bieker.tech"},
]
dependencies = ["torch-harmonics"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.project]
channels = ["pyg", "conda-forge", "pytorch"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.feature.cuda]
channels = ["nvidia", {channel = "pytorch", priority = -1}]

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
cuda-version = "12.*"
pytorch-gpu = {version = ">=2.4", channel = "conda-forge"}

[tool.pixi.feature.mlx]
# MLX is only available on macOS >=13.5 (>14.0 is recommended)
system-requirements = {macos = "13.5"}

[tool.pixi.feature.mlx.target.osx-arm64.dependencies]
mlx = {version = "*", channel = "conda-forge"}
pytorch-cpu = {version = ">=2.4.0", channel = "conda-forge"}

[tool.pixi.feature.cpu]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.feature.cpu.dependencies]
pytorch-cpu = {version = ">=2.4.0", channel = "conda-forge"}

[tool.pixi.dependencies]
python = "3.12.*"
torchvision = {version = "*", channel = "conda-forge"}
pip = "*"
pytest = "*"
pre-commit = "*"
ruff = "*"
xarray = "*"
pandas = "*"
h3-py = "3.*"
numcodecs = "*"
scipy = "*"
zarr = ">=3.0.0"
pyg = "*"
pytorch-cluster = "*"
pytorch-scatter = "*"
pytorch-spline-conv = "*"
pytorch-sparse = "*"
tqdm = "*"
lightning = "*"
einops = "*"
fsspec = "*"
datasets = "*"
trimesh = "*"
pysolar = "*"
rtree = "*"


[tool.pixi.environments]
default = ["cpu"]
cuda = ["cuda"]
mlx = ["mlx"]

[tool.pixi.tasks]
install = "pip install --editable ."
test = "pytest"
lint = "ruff"
format = "ruff format"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = ["E", "F", "D", "I"]
lint.ignore = ["D200","D202","D210","D212","D415","D105"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "I"]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests",
]


# Same as Black.
line-length = 100

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py311"
fix=false
# Group violations by containing file.
output-format = "github"
#lint.ignore-init-module-imports = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]

